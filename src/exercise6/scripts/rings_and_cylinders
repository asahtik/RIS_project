#!/usr/bin/env python
from __future__ import print_function

import rospy
import dlib
import cv2
import os
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import tf2_geometry_msgs
import tf2_ros
import tf_conversions
import math
# import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose, PoseWithCovarianceStamped, Twist
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
import message_filters
import time


def cylinder_callback(data):
	global cylinder_markers_pub, cylinder_marker_array, cylinder_marker_num, true_cylinders

	rospy.loginfo("Cylinder")

	accepted=False
	true=False
	counter_true=0
	sum_x = 0
	sum_y = 0
	sum_z = 0
	SPACE_BETWEEN_TRUE_DETECTIONS = 1
	SPACE_TO_COUNT_A_TRUE_DETECTION = 0.4
	TRUE_DETECTION = 3

	x = data.pose.position.x
	y = data.pose.position.y
	z = data.pose.position.z
	if not np.isnan(x) and not np.isnan(y) and not np.isnan(z):
		if cylinder_marker_array.markers:
			for mark in cylinder_marker_array.markers:
				if np.abs(x - mark.pose.position.x) + np.abs(y - mark.pose.position.y) < SPACE_TO_COUNT_A_TRUE_DETECTION:
					sum_x += mark.pose.position.x
					sum_y += mark.pose.position.y
					sum_z += mark.pose.position.z
					counter_true += 1
		if counter_true >= TRUE_DETECTION:
			accepted = True
			true = True
			for true in true_cylinders.markers:
				if np.abs(x - true.pose.position.x) + np.abs(y - true.pose.position.y) < SPACE_BETWEEN_TRUE_DETECTIONS:
					accepted = False
					break

	# DRAW A MARKER:
	marker = data
	marker.id = cylinder_marker_num
	cylinder_marker_num += 1
	marker.type = Marker.CYLINDER
	if true:
		true_cylinders.markers.append(marker)
	if accepted:
		marker.color = ColorRGBA(0, 1, 0, 1)
		marker.scale = Vector3(0.1, 0.1, 0.3)
	else:
		# draw a smaller, fainter marker
		marker.color = ColorRGBA(0, 0.2, 0.5, 0.5)
		marker.scale = Vector3(0.1, 0.1, 0.1)
	cylinder_marker_array.markers.append(marker)
	cylinder_markers_pub.publish(cylinder_marker_array)
	


def ring_callback(data):
	global ring_markers_pub, ring_marker_array, ring_marker_num, true_rings

	rospy.loginfo("Ring")

	accepted=False
	true = False
	counter_true=0
	sum_x = 0
	sum_y = 0
	sum_z = 0
	SPACE_BETWEEN_TRUE_DETECTIONS = 1
	SPACE_TO_COUNT_A_TRUE_DETECTION = 0.4
	TRUE_DETECTION = 3

	x = data.pose.position.x
	y = data.pose.position.y
	z = data.pose.position.z
	if not np.isnan(x) and not np.isnan(y) and not np.isnan(z):
		if ring_marker_array.markers:
			for mark in ring_marker_array.markers:
				if np.abs(x - mark.pose.position.x) + np.abs(y - mark.pose.position.y) < SPACE_TO_COUNT_A_TRUE_DETECTION:
					sum_x += mark.pose.position.x
					sum_y += mark.pose.position.y
					sum_z += mark.pose.position.z
					counter_true += 1
		if counter_true >= TRUE_DETECTION:
			accepted = True
			true = True
			for true in true_rings.markers:
				if np.abs(x - true.pose.position.x) + np.abs(y - true.pose.position.y) < SPACE_BETWEEN_TRUE_DETECTIONS:
					accepted = False
					break

	# DRAW A MARKER:
	marker = data
	marker.id = ring_marker_num
	ring_marker_num += 1
	marker.type = Marker.SPHERE
	if true:
		true_rings.markers.append(marker)
	if accepted:
		marker.color = ColorRGBA(0, 1, 0, 1)
		marker.scale = Vector3(0.15, 0.15, 0.15)
	else:
		# draw a smaller, fainter marker
		marker.color = ColorRGBA(0.5, 0, 0.2, 0.5)
		marker.scale = Vector3(0.1, 0.1, 0.1)
	ring_marker_array.markers.append(marker)
	ring_markers_pub.publish(ring_marker_array)
	


# Subscriber to get new detections of cylinders and rings
cylinder_sub = rospy.Subscriber('/detected_cylinder', Marker, cylinder_callback)
ring_sub = rospy.Subscriber('/detected_ring', Marker, ring_callback)
# Publisher for the visualization markers
ring_markers_pub = rospy.Publisher('/ring_markers', MarkerArray, queue_size=100)
cylinder_markers_pub = rospy.Publisher('/cylinder_markers', MarkerArray, queue_size=100)
# Marker array object used for showing markers in Rviz
ring_marker_array = MarkerArray()
ring_marker_num = 0
cylinder_marker_array = MarkerArray()
cylinder_marker_num = 0
true_rings = MarkerArray()
true_cylinders = MarkerArray()

class rings_and_cylinders:
	def __init__(self):
		rospy.init_node('rings_and_cylinders', anonymous=True, disable_signals=True)  # , log_level=rospy.DEBUG)

def main():
	rings_and_cylinders()

	rate = rospy.Rate(1)
	while not rospy.is_shutdown():
		rate.sleep()


if __name__ == '__main__':
	main()
